import nu.studer.gradle.jooq.JooqEdition

buildscript {
    ext {
        restdocsApiSpecVersion = '0.18.2'
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'org.springframework.boot' version '3.1.2'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'com.epages.restdocs-api-spec' version "${restdocsApiSpecVersion}" //RestDocs
    id 'org.hidetake.swagger.generator' version '2.19.2' //SwaggerUI
    id 'nu.studer.jooq' version '7.1.1'
}

group = 'com.commerce'
version = '0.0.1-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

jacoco {
    toolVersion = "0.8.10"
    reportsDirectory = layout.buildDirectory.dir('JacocoReportDir')
}

compileJava.options.encoding = 'UTF-8'
compileTestJava.options.encoding = 'UTF-8'

tasks.withType(Checkstyle) {
    reports {
        xml.required = true
        html.required = true
    }
}

checkstyleMain.source = fileTree('src/main/java')

checkstyle {
    // To Occur Build Exception When
    maxWarnings = 0
    configFile = file("config/checkstyle/naver-checkstyle-rules.xml")
    configProperties = ["suppressionFile": "config/checkstyle/naver-checkstyle-suppresions.xml"]
    sourceSets = [sourceSets.main] // To Avoid compileQueryDsl Error
}

def querydslDir = "src/main/generated"

sourceSets {
    main.java.srcDirs += [querydslDir]
}

tasks.withType(JavaCompile) {
    options.getGeneratedSourceOutputDirectory().set(file(querydslDir))
}

clean.doLast {
    file(querydslDir).deleteDir()
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

swaggerSources {
    sample {
        setInputFile(file("${project.buildDir}/api-spec/openapi3.yaml"))
    }
}

dependencies {
    //spring
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'

    //lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok' // 테스트 의존성 추가
    testAnnotationProcessor 'org.projectlombok:lombok' // 테스트 의존성 추가

    //DB
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    //NCP
    implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

    //jwt
    implementation 'io.jsonwebtoken:jjwt-api:0.11.5'
    implementation 'io.jsonwebtoken:jjwt-gson:0.11.5'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'

    //Rest Assured and RestDocs
    testImplementation 'org.springframework.restdocs:spring-restdocs-restassured'
    testImplementation "com.epages:restdocs-api-spec-restassured:${restdocsApiSpecVersion}"
    testImplementation "com.epages:restdocs-api-spec-mockmvc:${restdocsApiSpecVersion}"
    testImplementation 'io.rest-assured:rest-assured:5.3.1'

    //SwaggerUI
    swaggerUI 'org.webjars:swagger-ui:5.4.2'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'

    // queryDSL
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    implementation 'org.springframework.boot:spring-boot-starter-jooq'
    jooqGenerator 'org.jooq:jooq-codegen:3.17.4'
    jooqGenerator 'org.jooq:jooq-meta-extensions:3.17.4'
    jooqGenerator 'jakarta.xml.bind:jakarta.xml.bind-api:4.0.0'
    jooqGenerator 'mysql:mysql-connector-java:8.0.33'
}

test {
    systemProperty "spring.profiles.active", "test"
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
        csv.required = false
        html.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, excludes: [
                            '**/*Application*', // Exclude SpringApplication
                            '**/*Fixture*',     // Exclude Fixture Class
                            "**/Q*.class",    // Exclude QueryDsl Class
                            '**/*Config*'     // Exclude Config class
                    ])
                })
        )
    }
}

task copyGitSubmodule(type: Copy) {
    from './backend-config'
    include '*.yml'
    into './src/main/resources'
}


processResources {
    dependsOn copyGitSubmodule
}

openapi3 {
    server = "http://www.rheefine.com:8080"
    title = "Commerce API 문서"
    description = "Spring REST Docs with SwaggerUI."
    version = "0.0.1"
    outputFileNamePrefix = 'commerce'
    format = 'json'

    outputDirectory = 'build/resources/main/static'
}

task copyDocs {
    dependsOn(':openapi3')
    doLast {
        delete 'src/main/resources/static/backlog.json'
        copy {
            from "build/resources/main/static/commerce.json"
            into "src/main/resources/static/"
        }
    }
}

bootJar {
    dependsOn(':copyDocs')
}

jooq {
    version = dependencyManagement.importedProperties['jooq.version']
    edition = JooqEdition.OSS

    configurations {
        main {
            generationTool {
                logging = org.jooq.meta.jaxb.Logging.ERROR
                generator {
                    name = 'org.jooq.codegen.DefaultGenerator'
                    database {
                        name = 'org.jooq.meta.extensions.ddl.DDLDatabase' // DDLDatabase 사용
                        properties {
                            // DDL 스크립트 파일 위치 지정
                            property {
                                key = 'scripts'
                                value = 'src/main/resources/db/my-ddl.sql'
                            }
                        }
                    }
                    generate {
                        deprecated = false
                        records = true
                        immutablePojos = true
                        fluentSetters = true
                        javaTimeTypes = true
                    }
                    target {
                        packageName = 'com.commerce.backendserver'
                        directory = 'src/main/generated/jooq'
                    }
                    strategy {
                        name = 'org.jooq.codegen.example.JPrefixGeneratorStrategy'
                    }
                }
            }
        }
    }
}
